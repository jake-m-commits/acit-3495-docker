---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: anal
spec:
  replicas: 5
  selector:
    matchLabels:
      app: anal
  template:
    metadata:
      labels:
        app: anal
    spec:
      containers:
        - name: anal-app
          image: yetiatdocker/anal-app:latest
          envFrom:
            - configMapRef:
                name: config

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
spec:
  replicas: 5
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
        - name: auth-app
          image: yetiatdocker/auth-app:latest
          ports:
            - containerPort: 5000
          envFrom:
            - configMapRef:
                name: config

---

apiVersion: v1
kind: Service
metadata:
  name: auth-load-balancer
spec:
  type: LoadBalancer
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: auth

---

apiVersion: v1
kind: Service
metadata:
 name: auth-service
spec:
 selector:
   app: auth
 ports:
   - protocol: TCP
     port: 5000
     targetPort: 5000

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      hostname: mongodbserver
      containers:
        - name: mongodbserver
          image: mongo:6.0
          ports:
            - containerPort: 27017
          # volumeMounts:
          # - name: mongo-persistent-storage
          #   mountPath: /data/db
          envFrom:
            - configMapRef:
                name: config
      # volumes:
      # - name: mongo-persistent-storage
      #   persistentVolumeClaim:
      #     claimName: mongo-pv-claim

---

apiVersion: v1
kind: Service
metadata:
 name: mongo-service
spec:
 selector:
   app: mongo
 ports:
   - protocol: TCP
     port: 27017
     targetPort: 27017

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mongo"
    
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      hostname: mysqlserver
      containers:
        - name: mysqlserver
          image: mysql:8.0
          ports:
            - containerPort: 3306
          # volumeMounts:
          # - name: mysql-persistent-storage
          #   mountPath: /var/lib/mysql
          envFrom:
            - configMapRef:
                name: config
      # volumes:
      # - name: mysql-persistent-storage
      #   persistentVolumeClaim:
      #     claimName: mysql-pv-claim

---

apiVersion: v1
kind: Service
metadata:
 name: mysql-service
spec:
 selector:
   app: mysql
 ports:
   - protocol: TCP
     port: 3306
     targetPort: 3306

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mysql"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node
spec:
  replicas: 5
  selector:
    matchLabels:
      app: node
  template:
    metadata:
      labels:
        app: node
    spec:
      containers:
        - name: node-app
          image: yetiatdocker/node-app:latest
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: config

---

apiVersion: v1
kind: Service
metadata:
  name: node-load-balancer
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: node

---

apiVersion: v1
kind: Service
metadata:
 name: node-service
spec:
 selector:
   app: node
 ports:
   - protocol: TCP
     port: 3000
     targetPort: 3000

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: results
spec:
  replicas: 5
  selector:
    matchLabels:
      app: results
  template:
    metadata:
      labels:
        app: results
    spec:
      containers:
        - name: results-app
          image: yetiatdocker/results-app:latest
          ports:
            - containerPort: 5001
          envFrom:
            - configMapRef:
                name: config

---

apiVersion: v1
kind: Service
metadata:
  name: result-load-balancer
spec:
  type: LoadBalancer
  ports:
    - port: 5001
      targetPort: 5001
  selector:
    app: results

---

apiVersion: v1
kind: Service
metadata:
 name: results-service
spec:
 selector:
   app: results
 ports:
   - protocol: TCP
     port: 5001
     targetPort: 5001

---
